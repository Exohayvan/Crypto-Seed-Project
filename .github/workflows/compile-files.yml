name: Compile Files

on:
  workflow_run:
    workflows: ["Test Python Script"]
    types:
      - completed

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest', 'ubuntu-latest', 'macos-latest']

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - run: pip install -r requirements.txt pyinstaller

    # Get version
    - name: Get version
      shell: bash
      run: echo "VERSION=$(python main.py -v true)" | tee -a $GITHUB_ENV

    # Define the names for each operating system
    - name: Define names
      shell: bash
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          OS_NAME="Windows"
        elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          OS_NAME="Linux"
        else
          OS_NAME="MacOS"
        fi
        FILE_NAME="Build_${OS_NAME}-${VERSION}"
        echo "FILE_NAME=$FILE_NAME" | tee -a $GITHUB_ENV

    # Run the application on different operating systems
    - name: Run on Windows
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        pyinstaller --onefile --name %FILE_NAME% main.py
        .\dist\%FILE_NAME% -t true

    - name: Run on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --onefile --name $FILE_NAME.bin main.py
        ./dist/$FILE_NAME.bin -t true

    - name: Run on MacOS
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller --onefile --name $FILE_NAME.app main.py
        ./dist/$FILE_NAME.app -t true

    # Upload the artifact
    - name: Upload artifact for Windows
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.VERSION }}
        path: |
          dist/*
          dist\*

    - name: Upload artifact for Linux or MacOS
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.VERSION }}
        path: |
          dist/${{ env.FILE_NAME }}.*

  build-android:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_HOME: /home/runner/android-sdk

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install Kivy dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libunwind-dev
        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev zlib1g-dev
        sudo apt-get install -y libgstreamer1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly gstreamer1.0-plugins-bad
        sudo apt-get install -y openjdk-11-jdk
        sudo apt-get update
        sudo apt-get install build-essential
        sudo apt-get install libstdc++6
        sudo apt-get install aidl

    - name: Install Kivy and Cython
      run: |
        python -m pip install kivy cython

    - name: Install Buildozer
      run: |
        python -m pip install --upgrade buildozer

    - name: Install Android SDK Command-line tools
      run: |
        wget https://dl.google.com/android/repository/commandlinetools-linux-7302050_latest.zip
        sudo mkdir -p /usr/lib/android-sdk/cmdline-tools
        sudo unzip commandlinetools-linux-7302050_latest.zip -d /usr/lib/android-sdk/cmdline-tools
        sudo mv /usr/lib/android-sdk/cmdline-tools/cmdline-tools /usr/lib/android-sdk/cmdline-tools/latest
        echo "ANDROID_SDK_ROOT=/usr/lib/android-sdk" >> $GITHUB_ENV
        echo "/usr/lib/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH

    - name: Accept Android SDK licenses
      run: |
        yes | sdkmanager --licenses

    - name: Install Android SDK Build-Tools
      run: |
        mkdir -p /home/runner/android-sdk/cmdline-tools
        cd /home/runner/android-sdk/cmdline-tools
        curl -L https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip -o cmdline-tools.zip
        unzip cmdline-tools.zip
        rm cmdline-tools.zip
        mv cmdline-tools latest
        yes | /home/runner/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
        /home/runner/android-sdk/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"
      env:
        ANDROID_SDK_HOME: /home/runner/android-sdk


    - name: Initialize Buildozer spec file
      run: |
        buildozer init
        buildozer android.accept_sdk_license = True

    - name: Build APK
      run: buildozer android debug
      env:
        ANDROID_SDK_HOME: ${{ env.ANDROID_SDK_HOME }}


    - name: Upload APK artifact
      uses: actions/upload-artifact@v2
      with:
        name: APK
        path: bin/*.apk