name: Compile Files

on:
  workflow_run:
    workflows: ["Test Python Script"]
    types:
      - completed

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest', 'ubuntu-latest', 'macos-latest']

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - run: pip install -r requirements.txt pyinstaller

    # Get version
    - name: Get version
      shell: bash
      run: echo "VERSION=$(python main.py -v true)" | tee -a $GITHUB_ENV

    # Define the names for each operating system
    - name: Define names
      shell: bash
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          OS_NAME="Windows"
        elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          OS_NAME="Linux"
        else
          OS_NAME="MacOS"
        fi
        FILE_NAME="Build_${OS_NAME}-${VERSION}"
        echo "FILE_NAME=$FILE_NAME" | tee -a $GITHUB_ENV

    # Run the application on different operating systems
    - name: Run on Windows
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        pyinstaller --onefile --name %FILE_NAME% main.py
        .\dist\%FILE_NAME% -t true

    - name: Run on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --onefile --name $FILE_NAME.bin main.py
        ./dist/$FILE_NAME.bin -t true

    - name: Run on MacOS
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller --onefile --name $FILE_NAME.app main.py
        ./dist/$FILE_NAME.app -t true

    # Upload the artifact
    - name: Upload artifact for Windows
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.VERSION }}
        path: |
          dist/*
          dist\*

    - name: Upload artifact for Linux or MacOS
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.VERSION }}
        path: |
          dist/${{ env.FILE_NAME }}.*

  build-android:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    # Install Kivy dependencies
    - name: Install Kivy dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libunwind-dev
        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev zlib1g-dev
        sudo apt-get install -y libgstreamer1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly gstreamer1.0-plugins-bad
        sudo apt-get install -y openjdk-11-jdk

    # Install Kivy and Cython
    - name: Install Kivy and Cython
      run: |
        python -m pip install kivy cython

    # Install Buildozer
    - name: Install Buildozer
      run: |
        python -m pip install --upgrade buildozer

    # Accept Android SDK licenses
    - name: Accept Android SDK licenses
      run: |
        yes | sudo ~/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager --licenses

    # Initialize Buildozer spec file
    - name: Initialize Buildozer spec file
      run: |
        buildozer init

    # Build APK
    - name: Build APK
      run: |
        export PATH=$PATH:~/.local/bin
        buildozer -v android debug

    # Upload APK artifact
    - name: Upload APK artifact
      uses: actions/upload-artifact@v2
      with:
        name: APK
        path: bin/*.apk