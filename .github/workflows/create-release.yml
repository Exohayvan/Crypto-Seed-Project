name: Create Release

on:
  workflow_run:
    workflows: ["Compile Files (PC)", "Compile Files (Debian)"]
    types:
      - completed

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Fetch workflow run details
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pc_workflow_run=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/actions/workflow-runs/${{ github.event.workflow_run.id }}")
          pc_conclusion=$(echo "$pc_workflow_run" | jq -r '.conclusion')

          debian_workflow_run_id=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/Exohayvan/Crypto-Seed-Project/actions/workflows/Compile%20Files%20(Debian)/runs" | jq -r '.workflow_runs[] | select(.head_sha == "2b004ef559f9aab5770b9fb1b2b9eae8c6a78c14") | .id')

          debian_workflow_run=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/actions/workflow-runs/$debian_workflow_run_id")
          debian_conclusion=$(echo "$debian_workflow_run" | jq -r '.conclusion')

          echo "PC_CONCLUSION=$pc_conclusion" | tee -a $GITHUB_ENV
          echo "DEBIAN_CONCLUSION=$debian_conclusion" | tee -a $GITHUB_ENV

      - name: Check if both workflow runs were successful
        if: ${{ env.PC_CONCLUSION == 'success' && env.DEBIAN_CONCLUSION == 'success' }}
        run: echo "Both workflow runs were successful."

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Find and download artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get all completed workflow runs
          workflow_runs=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=completed")

          # Loop through each workflow run
          for run_id in $(echo "$workflow_runs" | jq -r '.workflow_runs[].id'); do
            # Get artifacts for the current workflow run
            artifacts=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id/artifacts")
      
            # Loop through each artifact and download it
            for artifact in $(echo "$artifacts" | jq -r '.artifacts[]'); do
              artifact_url=$(echo "$artifact" | jq -r '.archive_download_url')
              artifact_name=$(echo "$artifact" | jq -r '.name')
        
              if [ -n "$artifact_url" ]; then
                echo "Downloading artifact $artifact_name from $artifact_url"
                curl -L --header "Authorization: token $GITHUB_TOKEN" --header "Accept: application/vnd.github+json" --remote-name --location "$artifact_url"
                unzip -o "$(basename "$artifact_url")" -d "artifacts/$artifact_name"

                # Compress each file into a separate .zip archive
                for file in "artifacts/$artifact_name"/*; do
                  base_name=$(basename "$file")
                  echo "Compressing $base_name"
                  zip -r "artifacts/$artifact_name/${base_name%.*}.zip" "$file"
                  rm -f "$file"
                done
              else
                echo "No artifacts found for workflow run $run_id"
                exit 1
              fi
            done
          done


      - name: Get version and artifact names
        shell: bash
        run: |
          VERSION=$(python main.py -v true)
          ARTIFACT_NAMES=$(ls artifacts/* | tr '\n' ',')
          echo "VERSION=$VERSION" | tee -a $GITHUB_ENV
          echo "ARTIFACT_NAMES=$ARTIFACT_NAMES" | tee -a $GITHUB_ENV

      - name: Check if release already exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          releases=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases")
          if echo "$releases" | grep -q "\"tag_name\": \"v${{ env.VERSION }}\""; then
            echo "Release v${{ env.VERSION }} already exists, skipping."
            exit 1
          fi

      - name: Generate Changelog
        run: |
          set -x
          releases=$(curl --silent --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases")
          latest_release_info=$(echo "$releases" | jq -r 'sort_by(.created_at) | reverse | .[0]')
          latest_release_tag=$(echo "$latest_release_info" | jq -r '.tag_name // ""')

          git fetch --tags --unshallow || true
          git fetch origin main

          if [ -z "$latest_release_tag" ]; then
            echo "No previous release found. Generating changelog from the beginning."
            changelog=$(git log --pretty=format:"- %s (%h)" -- main.py)
          else
            echo "Generating changelog since the latest release: $latest_release_tag"
            changelog=$(git log "$latest_release_tag..HEAD" --pretty=format:"- %s (%h)" -- main.py)
          fi
          added_changes=$(echo "$changelog" | grep -Ei "(Add(ed)?|New)" || true)
          removed_changes=$(echo "$changelog" | grep -Ei "Remove(d)?" || true)
          fixed_changes=$(echo "$changelog" | grep -Ei "Fix(ed)?" || true)

          echo "Added:" > changelog.txt
          if [ -z "$added_changes" ]; then
            echo "N/A" >> changelog.txt
          else
            echo "${added_changes}" | sed -E 's/(Add(ed)?|New)/ /I' >> changelog.txt
          fi
          echo " " >> changelog.txt
    
          echo "Removed:" >> changelog.txt
          if [ -z "$removed_changes" ]; then
            echo "N/A" >> changelog.txt
          else
            echo "${removed_changes}" | sed -E 's/Remove(d)?/ /I' >> changelog.txt
          fi
          echo " " >> changelog.txt
    
          echo "Fixed Issues:" >> changelog.txt
          if [ -z "$fixed_changes" ]; then
            echo "N/A" >> changelog.txt
          else
            echo "${fixed_changes}" | sed -E 's/Fix(ed)?/ /I' >> changelog.txt
          fi
          echo " " >> changelog.txt
    
          echo "[Known Issues](https://github.com/${{ github.repository }}/issues?q=is%3Aissue+milestone%3A${{ env.VERSION }})" >> changelog.txt

      - name: Urlencode VERSION
        id: urlencode
        run: |
          urlencode() {
            local string="${1}"
            local strlen="${#string}"
            local encoded=""
            for (( pos=0 ; pos<strlen ; pos++ )); do
              local c="${string:$pos:1}"
              case "$c" in
                [-_.~a-zA-Z0-9] ) encoded+="$c" ;;
                * ) printf -v encoded '%s%%%02X' "$encoded" "'$c"
              esac
            done
            echo "$encoded"
          }
          encoded_version=$(urlencode "${{ env.VERSION }}")
          echo "ENCODED_VERSION=$encoded_version" | tee -a $GITHUB_ENV
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          body_path: changelog.txt
          draft: false
          prerelease: ${{ contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta') }}

      - name: Attach artifacts to the release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IFS=',' read -ra ADDR <<< "$ARTIFACT_NAMES"
          for asset in "${ADDR[@]}"; do
            echo "Uploading $asset to release"
            curl \
              --request POST \
              --header "Authorization: token $GITHUB_TOKEN" \
              --header "Content-Type: $(file -b --mime-type $asset)" \
              --data-binary @$asset \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$(basename $asset)"
          done