name: Create Release

on:
  workflow_run:
    workflows: ["Compile Files (PC)", "Compile Files (Debian)"]
    types:
      - completed

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Fetch workflow run details
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pc_workflow_run=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/actions/workflow-runs/${{ github.event.workflow_run.id }}")
          pc_conclusion=$(echo "$pc_workflow_run" | jq -r '.conclusion')

          debian_workflow_run_id=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/actions/workflows/Compile%20Files%20(Debian)/runs" | jq -r 'if .workflow_runs then .workflow_runs[] | select(.head_sha == "${{ github.sha }}") | .id else null end')

          if [ -n "$debian_workflow_run_id" ]; then
            debian_workflow_run=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/actions/workflow-runs/$debian_workflow_run_id")
            debian_conclusion=$(echo "$debian_workflow_run" | jq -r '.conclusion')
          else
            debian_conclusion=null
          fi

          echo "PC_CONCLUSION=$pc_conclusion" | tee -a $GITHUB_ENV
          echo "DEBIAN_CONCLUSION=$debian_conclusion" | tee -a $GITHUB_ENV

      - name: Check if both workflow runs were successful
        if: ${{ env.PC_CONCLUSION == 'success' && env.DEBIAN_CONCLUSION == 'success' }}
        run: echo "Both workflow runs were successful."

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Find and download artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          artifacts=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/actions/artifacts")
          artifact_url=$(echo "$artifacts" | jq -r '.artifacts[0].archive_download_url')
          
          if [ -n "$artifact_url" ]; then
            echo "Downloading artifact from $artifact_url"
            curl -L --header "Authorization: token $GITHUB_TOKEN" --header "Accept: application/vnd.github+json" --remote-name --location "$artifact_url"
            unzip -o "$(basename "$artifact_url")" -d artifacts

            # Compress each file into a separate .zip archive
            for file in artifacts/*; do
              base_name=$(basename "$file")
              echo "Compressing $base_name"
              zip -r "artifacts/${base_name%.*}.zip" "$file"
              rm -f "$file"
            done
          else
            echo "No artifacts found"
            exit 1
          fi

      - name: Get version and artifact names
        shell: bash
        run: |
          VERSION=$(python main.py -v true)
          echo "VERSION=$VERSION" | tee -a $GITHUB_ENV

          for file in artifacts/*.zip; do
            base_name=$(basename "$file")
            echo "ARTIFACT_${base_name^^}_NAME=$base_name" | tee -a $GITHUB_ENV
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          body: ${{ env.VERSION }}
          draft: false
          files: artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
