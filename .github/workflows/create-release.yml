name: Create Release

on:
  workflow_run:
    workflows: ["Compile Files"]
    types:
      - completed

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Find and download artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          artifacts=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/actions/artifacts")
          artifact_url=$(echo "$artifacts" | jq -r '.artifacts[0].archive_download_url')
          
          if [ -n "$artifact_url" ]; then
            echo "Downloading artifact from $artifact_url"
            curl -L --header "Authorization: token $GITHUB_TOKEN" --header "Accept: application/vnd.github+json" --remote-name --location "$artifact_url"
            unzip -o "$(basename "$artifact_url")" -d artifacts

            # Compress each file into a separate .zip archive
            for file in artifacts/*; do
              base_name=$(basename "$file")
              echo "Compressing $base_name"
              zip -r "artifacts/${base_name%.*}.zip" "$file"
              rm -f "$file"
            done
          else
            echo "No artifacts found"
            exit 1
          fi

      - name: Get version and artifact names
        shell: bash
        run: |
          VERSION=$(python main.py -v true)
          ARTIFACT_NAMES=$(ls artifacts/* | tr '\n' ',')
          echo "VERSION=$VERSION" | tee -a $GITHUB_ENV
          echo "ARTIFACT_NAMES=$ARTIFACT_NAMES" | tee -a $GITHUB_ENV

      - name: Check if release already exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          releases=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases")
          if echo "$releases" | grep -q "\"tag_name\": \"v${{ env.VERSION }}\""; then
            echo "Release v${{ env.VERSION }} already exists, skipping."
            exit 1
          fi

      - name: Create Milestone
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          milestones=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/milestones")
          if echo "$milestones" | grep -q "\"title\": \"${{ env.VERSION }}\""; then
            echo "Milestone ${{ env.VERSION }} already exists, skipping."
          else
            echo "Creating milestone ${{ env.VERSION }}"
            curl --request POST \
              --header "Authorization: token $GITHUB_TOKEN" \
              --header "Content-Type: application/json" \
              --data '{"title": "'"${{ env.VERSION }}"'", "state": "open"}' \
              "https://api.github.com/repos/${{ github.repository }}/milestones"
          fi

      - name: Generate Changelog
        run: |
          set -x
          latest_release_tag=$(curl --silent --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name // ""')
          if [ -z "$latest_release_tag" ]; then
            echo "No previous release found. Generating changelog from the beginning."
            git fetch --tags
            changelog=$(git log --pretty=format:"- %s" -- main.py utils.py)
          else
            echo "Generating changelog since the latest release: $latest_release_tag"
            git fetch --tags
            changelog=$(git log "$latest_release_tag"..HEAD --pretty=format:"- %s" -- main.py utils.py)
          fi
          added_changes=$(echo "$changelog" | grep -i "^- Added")
          removed_changes=$(echo "$changelog" | grep -i "^- Removed")
          fixed_changes=$(echo "$changelog" | grep -i "^- Fixed")
          echo "Added:" > changelog.txt
          echo "${added_changes//- Added/— }" >> changelog.txt
          echo " " >> changelog.txt
          echo "Removed:" >> changelog.txt
          echo "${removed_changes//- Removed/— }" >> changelog.txt
          echo " " >> changelog.txt
          echo "Fixed:" >> changelog.txt
          echo "${fixed_changes//- Fixed/— }" >> changelog.txt
          echo " " >> changelog.txt
          echo "Known Issues:" >> changelog.txt
          echo "[Known Issues](https://github.com/${{ github.repository }}/issues?q=is%3Aissue+milestone%3A${{ env.VERSION }})" >> changelog.txt

      - name: Urlencode VERSION
        id: urlencode
        run: |
          urlencode() {
            local string="${1}"
            local strlen="${#string}"
            local encoded=""
            for (( pos=0 ; pos<strlen ; pos++ )); do
              local c="${string:$pos:1}"
              case "$c" in
                [-_.~a-zA-Z0-9] ) encoded+="$c" ;;
                * ) printf -v encoded '%s%%%02X' "$encoded" "'$c"
              esac
            done
            echo "$encoded"
          }
          encoded_version=$(urlencode "${{ env.VERSION }}")
          echo "ENCODED_VERSION=$encoded_version" | tee -a $GITHUB_ENV
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          body_path: changelog.txt
          draft: false
          prerelease: ${{ contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta') }}

      - name: Attach artifacts to the release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IFS=',' read -ra ADDR <<< "$ARTIFACT_NAMES"
          for asset in "${ADDR[@]}"; do
            echo "Uploading $asset to release"
            curl \
              --request POST \
              --header "Authorization: token $GITHUB_TOKEN" \
              --header "Content-Type: $(file -b --mime-type $asset)" \
              --data-binary @$asset \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$(basename $asset)"
          done