name: Create Release

on:
  workflow_run:
    workflows: ["Compile Files"] # Name of your previous workflow
    types:
      - completed

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: List available artifacts
        run: |
          artifacts=$(curl --silent --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/actions/artifacts")
          echo "Available artifacts:"
          echo "$artifacts" | jq '.artifacts[] | .name'

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: Build_${{ env.VERSION }}_${{ github.event.workflow_run.id }}_${{ steps.get_timestamp.outputs.timestamp }}
          path: artifacts


      - name: Extract version
        run: |
          echo "VERSION=$(grep -oP '(?<=Build_)[^/]+' artifacts/* | head -1)" | tee -a $GITHUB_ENV

      - name: Check if release already exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          releases=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases")
          if echo "$releases" | grep -q "\"tag_name\": \"v${{ env.VERSION }}\""; then
            echo "Release v${{ env.VERSION }} already exists, skipping."
            exit 1
          fi

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Generate Changelog
        run: |
          response=$(curl --silent --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          latest_release_tag=$(echo "$response" | jq -r '.tag_name')
          prerelease=$(echo "$response" | jq -r '.prerelease')
          git fetch --tags
          if [ "$latest_release_tag" == "null" ]; then
            changelog="Initial release."
          elif [ "$prerelease" == "true" ]; then
            changelog="This is a prerelease version."
            changelog+=$(git diff "$latest_release_tag" HEAD -- main.py)
          else
            changelog=$(git diff "$latest_release_tag" HEAD -- main.py)
          fi
          echo "$changelog" > changelog.txt

      - name: Generate Changelog
        run: |
          latest_release_tag=$(curl --silent --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name')
          git fetch --tags
          if [ "$latest_release_tag" == "null" ]; then
            changelog="Initial release."
          else
            changelog=$(git diff "$latest_release_tag" HEAD -- main.py)
          fi
          echo "$changelog" > changelog.txt

      - name: Attach artifacts to the release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          assets=($(ls artifacts))
          for asset in "${assets[@]}"; do
            echo "Uploading $asset to release"
            curl \
              --request POST \
              --header "Authorization: token $GITHUB_TOKEN" \
              --header "Content-Type: $(file -b --mime-type artifacts/$asset)" \
              --data-binary @artifacts/$asset \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$asset"
          done
